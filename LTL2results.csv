ID,Question,Formula,GPT-3 Answer, Description (using LTL.txt prompt)
LTL_dev_1,"Every time hunger strikes, eating eventually follows.","G(hunger -> F eating)","G(hunger -> F eating)","{'Every time': 'G', 'hunger strikes': 'hunger', 'eating eventually follows': 'F eating', 'hunger strikes, eating eventually follows': 'G(hunger -> F eating)'}"
LTL_dev_2,"It's never the case that rain and sunshine occur at the same time.","G(!(rain & sunshine))","G(!(rain & sunshine))","{'It's never the case that': 'G(!())', 'rain and sunshine occur at the same time': '!(rain & sunshine)', 'It's never the case that rain and sunshine occur at the same time': 'G(!(rain & sunshine))'}"
LTL_dev_3,"Whenever the engine starts, acceleration kicks in three steps later.", "G(engine_start -> X (X (X acceleration_on)))", "G(engine_start -> X X X acceleration)", "{'Whenever': 'G', 'the engine starts': 'engine_start', 'acceleration kicks in three steps later': 'X X X acceleration'}"
LTL_dev_4,"I am a student must hold everywhere until from some point on, I am graduated holds infinitely often.","student U (G (F graduated))","student U (G graduated)","{'I am a student': 'student', 'I am graduated': 'graduated', 'I am a student must hold everywhere until I am graduated holds infinitely often': 'student U (G graduated)'}"
LTL_dev_5,"Whenever an exam is scheduled, studying occurs beforehand.","G (exam_scheduled -> (!exam_scheduled U (studying & !exam_scheduled)))","G(exam -> (studying U exam))","{'Whenever': 'G', 'an exam is scheduled': 'exam', 'studying occurs beforehand': 'studying U exam'}"
LTL_dev_6,"If it's nighttime, then sleeping occurs.","G (nighttime -> sleeping)","G (nighttime -> sleeping)","{'If': '->', 'it's nighttime': 'night', 'then': '->', 'sleeping occurs': 'sleep'}"
LTL_dev_7,"Both the sun is shining and the birds are chirping in every time step.","G (sun_shining & birds_chirping)","G(sun & birds)","{'Both the sun is shining and the birds are chirping': 'sun & birds', 'in every time step': 'G'}"
LTL_dev_8,"The sun shines always, and whenever the birds sing, the cats don't meow.","G sun_shines & G(birds_sing -> !cats_meow)","G(sun shines) & G(birds sing -> !(cats meow)).",""
LTL_dev_9,"If it is the case that every emission test is eventually passed, then good air quality needs to holds infinitely often.","G(emission_test -> F passed) -> G F good_air_quality","",""
LTL_dev_10,"If Mark loves Stacy infinitely often, then Stacey loves Mark holds infinitely often as well.","G F mark_loves_stacey -> G F stacey_loves_mark","","{'The sun shines always': 'G(sun shines)', 'whenever': '->', 'the birds sing': 'birds sing', 'the cats don't meow': '!(cats meow)'}"
LTL_dev_11,"Either the store is open all day or the online website is accessible around the clock.","G F store_open || G F online_website_accessible","G open_store | G accessible_website","{'Either': '|', 'the store is open all day': 'G open_store', 'the online website is accessible around the clock': 'G accessible_website'}"
LTL_dev_12,"From some point in time on I am always not childless.","F G ! childless","F G not_childless","{'From some point in time on': 'F', 'always': 'G', 'not childless': 'not_childless', 'I am always not childless': 'G not_childless'}"
LTL_dev_13,"Whenever there is no peace and no prosperity, conflict arises eventually.","G (!(peace & prosperity) -> F conflict)","!(peace & prosperity) -> F conflict","{'Whenever': '->', 'there is no peace and no prosperity': '!(peace & prosperity)', 'conflict arises eventually': 'F conflict'}"
LTL_dev_14,"Happiness and sadness never coincide, but one of them is experienced at every moment in life.","G(!(happiness & sadness)) & G(happiness || sadness)","G(!(happiness & sadness)) & G(happiness | sadness).","{'Happiness and sadness': 'happiness & sadness', 'Happiness and sadness never coincide': 'G(!(happiness & sadness))', 'one of them is experienced at every moment in life': 'G(happiness | sadness)'}"
LTL_dev_15,"Whenever the ingredients sugar and flour are equal in quantity, the resulting cake's taste and texture are equally good.","G ((sugar <-> flour) -> (taste <-> texture))","G(sugar = flour) -> (taste = texture)","{'The ingredients sugar and flour': 'sugar & flour', 'Equal in quantity': 'G(sugar = flour)', 'The resulting cake's taste and texture are equally good': '(sugar = flour) -> (taste = texture)'}"
LTL_dev_16,"A meeting can only be scheduled if a room reservation has been made beforehand.","(! schedule_meeting) U room_reservation","G(meeting -> F reservation)","{'A meeting': 'meeting', 'scheduled': 'F', 'if': '->', 'a room reservation has been made beforehand': 'reservation', 'can only be': 'G'}"
LTL_dev_17,"After the shipment is delivered, a return request won't be processed again.","G (shipment_delivered -> X G ! processed_return)","X(ShipmentDelivered) -> !F(ReturnRequestProcessed)","{'After the shipment is delivered': 'X(ShipmentDelivered)', 'a return request won't be processed again': '!F(ReturnRequestProcessed)', 'After the shipment is delivered, a return request won't be processed again': 'X(ShipmentDelivered) -> !F(ReturnRequestProcessed)'}"
LTL_dev_18,"After the valve is opened, water flows freely.","(water_flow U (water_flow & ! open_valve)) | G water_flow","",""
LTL_dev_19,"Music practice and anyone sleeping won't happen simultaneously.","G !(music_practice & anyone_sleeping)","G(!(music_practice & someone_sleeping))","{'Music practice': 'music_practice', 'anyone sleeping': 'someone_sleeping', 'Music practice and anyone sleeping won't happen simultaneously': 'G(!(music_practice & someone_sleeping))'}"
LTL_dev_20,"Whenever the oven preheats and the timer beeps for the next step, then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps.","G (oven_preheats & X timer_beeps -> X X aroma)","(oven_preheats & timer_beeps) -> X timer_beeps -> X aroma_of_cookies","{'the oven preheats': 'oven_preheats', 'the timer beeps for the next step': 'timer_beeps', 'the aroma of freshly baked cookies fills the kitchen': 'aroma_of_cookies', 'one step after': 'X'}
{'Whenever the oven preheats and the timer beeps for the next step': '(oven_preheats & timer_beeps)', 'then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps': 'X timer_beeps -> X aroma_of_cookies'}"
LTL_dev_21,"Whenever the seeds are planted, the flowers bloom eventually from the next step onward.","G (seeds_planted -> X F flowers_bloom)","",""
LTL_dev_22,"We work every fifth day.","G (work -> X !work & X X !work & X X X !work & X X X X !work & X X X X X work)","",""
LTL_dev_23,"Either failed my exam holds infinitely often or passed the exam holds in the next step.","G F failed_exam || X passed_exam","",""
LTL_dev_24,"Sam is taller than Ben will hold at all instances.","G (sam_taller_than_ben)","G(Sam_is_taller_than_Ben)","{'Sam is taller than Ben': 'Sam_is_taller_than_Ben', 'Sam is taller than Ben will hold at all instances': 'G(Sam_is_taller_than_Ben)'}"
LTL_dev_25,"Whenever the food is hot, the food is cold in the next two steps.","G (hot_food -> (cold_food | X cold_food))","F food_is_hot -> X food_is_cold & XX food_is_cold","{'the food is hot': 'food_is_hot', 'the food is cold': 'food_is_cold', 'in the next two steps': 'X food_is_cold & XX food_is_cold'}
{'Whenever the food is hot, the food is cold in the next two steps': 'F food_is_hot -> X food_is_cold & XX food_is_cold'}"
LTL_dev_26,"At all times, one of the following apps will be running: messaging, navigation, or music.","G (messaging | navigation | music)","G (messaging | navigation | music)","{'At all times': 'G', 'one of the following apps will be running': 'messaging | navigation | music'}"
LTL_dev_27,"If the alarm rings, someone will eventually wake up.","G (alarm_ring -> F wake_up)","",""
LTL_dev_28,"The temperature must always be within a normal range, but if it exceeds that range, it allows for two time intervals to return to normal.","G (temperature_normal | X temperature_normal)","",""
LTL_dev_29,"Not a day goes by where the sky is clear for more than two hours.","G !(clear_sky & X clear_sky & X X clear_sky)","",""
LTL_dev_30,"The sprinklers can only activate every three hours to conserve water.","G (sprinklers_activate -> (X !sprinklers_activate & X X !sprinklers_activate & X X X !sprinklers_activate))","",""
LTL_dev_31,"Every sunrise is followed by the chirping of birds.","G (sunrise -> X birds_chirping)","",""
LTL_dev_32,"Eventually, you drink water while the sun shines.","F (drink_water & sun_shines)","F(drink_water & sun_shines)","{'Eventually, you drink water while the sun shines': 'F(drink_water & sun_shines)'}"
LTL_dev_33,"Both the waves crashing and the seagulls flying occur eventually.","F waves_crashing & F seagulls_flying","F(Waves crashing) & F(Seagulls flying)","{'Both the waves crashing and the seagulls flying occur eventually': 'F(Waves crashing) & F(Seagulls flying)'}"
LTL_dev_34,"It's always the case that the current temperature is equal to tomorrow's temperature.","G (temperature_today <-> X temperature_tomorrow)","G(Current temperature = Tomorrow's temperature)","{'It's always the case that the current temperature is equal to tomorrow's temperature': 'G(Current temperature = Tomorrow's temperature)'}"
LTL_dev_35,"If it's sunny then, in the next step, thunder holds until it rains or always thunder holds.","G (sunny -> X (thunder U rain | G thunder))","(Sunny -> X Thunder) & (Thunder U Rain | G(Thunder))","{'If it's sunny then, in the next step, thunder holds': 'Sunny -> X Thunder', 'thunder holds until it rains': 'Thunder holds U Rain', 'always thunder holds': 'G(Thunder)'}"
LTL_dev_36,"The party is on until the speaker is broken or always the party is on.","(party_on U speaker_broken) | G party_on","(Party is on U Speaker is broken) | G(Party is on)","{'The party is on until the speaker is broken': 'Party is on U Speaker is broken', 'always the party is on': 'G(Party is on)'}"

