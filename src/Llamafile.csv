ID, Question, HumanAnnotator ,Llama3-7BAnswer, Dictionary, Compare
LTL_dev_1,"Every time hunger strikes, eating eventually follows.","G(hunger -> F eating)","G(h -> F e)","{'Every time': 'G', 'hunger strikes': 'h', 'eating eventually follows': 'h -> F e', 'hunger strikes, eating eventually follows': 'G(h -> F e)'}",
LTL_dev_2,"It's never the case that rain and sunshine occur at the same time.","G(!(rain & sunshine))","G!(r & s)","{It's never the case: 'G', rain and sunshine occur at the same time: 'r & s', never: '!'}",
LTL_dev_3,"Whenever the engine starts, acceleration kicks in three steps later.","G(engine_start -> X (X (X acceleration_on)))","G(e -> XXXa)","{Whenever: 'G', the engine starts: 'e', acceleration kicks in three steps later: 'e -> XXXa', the engine starts, acceleration kicks in three steps later: 'G(e -> XXXa)'}",
LTL_dev_4,"I am a student must hold everywhere until from some point on, I am graduated holds infinitely often.","TO DO","Gs U GFg","{I am a student: 's', must hold everywhere: 'G', until: 'U', from some point on: 'F', I am graduated: 'g', holds infinitely often: 'GFg', I am a student must hold everywhere until from some point on, I am graduated holds infinitely often: 'Gs U GFg'}", compare
LTL_dev_5,"Whenever an exam is scheduled, studying occurs beforehand.","G (exam_scheduled -> (!exam_scheduled U (studying & !exam_scheduled)))","G(!Xe -> s)", "{Whenever: 'G', an exam is scheduled: 'e', studying occurs beforehand: '!Xe -> s', an exam is scheduled, studying occurs beforehand: 'G(!Xe -> s)'}" , 
LTL_dev_6,"If it's nighttime, then sleeping occurs.","Ground trhtuh","G(n -> s)","{If: '->', it's nighttime: 'n', then sleeping occurs: 's', it's nighttime, then sleeping occurs: 'G(n -> s)'}" , 
LTL_dev_8,"The sun shines always, and whenever the birds sing, the cats don't meow.","G sun_shines & G(birds_sing -> !cats_meow)","Gs & G(b -> !c)","{The sun shines always: 'Gs', and: '&', whenever the birds sing: 'Gb', the cats don't meow: '!c', The sun shines always, and whenever the birds sing, the cats don't meow: 'Gs & G(b -> !c)'}",
LTL_dev_9,"If it is the case that every emission test is eventually passed, then good air quality needs to holds infinitely often.","G(emission_test -> F passed) -> G F good_air_quality","G(test -> F pass) -> GF(good_air_quality)","GFp -> GFa","{If it is the case that: '->', every emission test is eventually passed: 'GFp', then: '->', good air quality needs to holds infinitely often: 'GFa', If it is the case that every emission test is eventually passed, then good air quality needs to holds infinitely often: 'GFp -> GFa'}",
LTL_dev_10,"If Mark loves Stacy infinitely often, then Stacey loves Mark holds infinitely often as well.","G F mark_loves_stacey -> G F stacey_loves_mark","F(G(Mark loves Stacy)) -> F(G(Stacy loves Mark))","GFm -> GFs","{If: '->', Mark loves Stacy infinitely often: 'GFm', then: '->', Stacey loves Mark holds infinitely often as well: 'GFs', If Mark loves Stacy infinitely often, then Stacey loves Mark holds infinitely often as well: 'GFm -> GFs'}",
LTL_dev_11,"Either the store is open all day or the online website is accessible around the clock.","G F store_open || G F online_website_accessible","G open_store | G accessible_website","Gs or Gw","{Either: 'or', the store is open all day: 'Gs', or: 'or', the online website is accessible around the clock: 'Gw', Either the store is open all day or the online website is accessible around the clock: 'Gs or Gw'}",
LTL_dev_12,"From some point in time on I am always not childless.","F G ! childless","F Gc","{From some point in time on: 'F', I am always not childless: 'Gc', From some point in time on I am always not childless: 'F Gc'}", 
LTL_dev_13,"Whenever there is no peace and no prosperity, conflict arises eventually.","G (!(peace & prosperity) -> F conflict)","G(!p & !r -> Fc)","{Whenever: 'G', there is no peace and no prosperity: '!p & !r', conflict arises eventually: 'Fc', Whenever there is no peace and no prosperity, conflict arises eventually: 'G(!p & !r -> Fc)'}",
LTL_dev_14,"Happiness and sadness never coincide, but one of them is experienced at every moment in life.","G(!(happiness & sadness)) & G(happiness || sadness)","G(!(h & s) & G(h or s))","{Happiness and sadness never coincide: '!(h & s)', but: '&', one of them is experienced at every moment in life: 'G(h or s)', Happiness and sadness never coincide, but one of them is experienced at every moment in life: 'G(!(h & s) & G(h or s))'}",
LTL_dev_15,"Whenever the ingredients sugar and flour are equal in quantity, the resulting cake's taste and texture are equally good.","G ((sugar <-> flour) -> (taste <-> texture))","G(s = f -> t & x)","{Whenever: 'G', the ingredients sugar and flour are equal in quantity: 's = f', the resulting cake's taste and texture are equally good: 't & x', Whenever the ingredients sugar and flour are equal in quantity, the resulting cake's taste and texture are equally good: 'G(s = f -> t & x)'}",
LTL_dev_16,"A meeting can only be scheduled if a room reservation has been made beforehand.","(! schedule_meeting) U room_reservation","G(m -> Xr)","{A meeting can only be scheduled: 'm', if: '->', a room reservation has been made beforehand: 'Xr', A meeting can only be scheduled if a room reservation has been made beforehand: 'G(m -> Xr)'}",
LTL_dev_17,"After the shipment is delivered, a return request won't be processed again.","G (shipment_delivered -> X G ! processed_return)","Fd -> Gr","{After: 'F', the shipment is delivered: 'd', a return request won't be processed again: '!r', After the shipment is delivered, a return request won't be processed again: 'Fd -> Gr'}",
LTL_dev_18,"After the valve is opened, water flows freely.","(water_flow U (water_flow & ! open_valve)) | G water_flow","Fo -> Ff","{After: 'F', the valve is opened: 'o', water flows freely: 'f', After the valve is opened, water flows freely: 'Fo -> Ff'}",
LTL_dev_19,"Music practice and anyone sleeping won't happen simultaneously.","G !(music_practice & anyone_sleeping)","G!(m & s)","{Music practice: 'm', and: '&', anyone sleeping: 's', won't happen simultaneously: '!(m & s)', Music practice and anyone sleeping won't happen simultaneously: 'G!(m & s)'}",
LTL_dev_20,"Whenever the oven preheats and the timer beeps for the next step, then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps.","G (oven_preheats & X timer_beeps -> X X aroma)","G(p & t -> Xa)","{Whenever: 'G', the oven preheats: 'p', and: '&', the timer beeps for the next step: 't', then: '->', the aroma of freshly baked cookies fills the kitchen: 'a', one step after the timer beeps: 'Xt', Whenever the oven preheats and the timer beeps for the next step, then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps: 'G(p & t -> Xa)'}",
LTL_dev_21,"Whenever the seeds are planted, the flowers bloom eventually from the next step onward.","TO DO","G(s -> XFb)","{Whenever: 'G', the seeds are planted: 's', the flowers bloom: 'b', eventually: 'F', from the next step onward: 'XG', Whenever the seeds are planted, the flowers bloom eventually from the next step onward: 'G(s -> XFb)'}", 
LTL_dev_22,"We work every fifth day.","G (work -> X !work & X X !work & X X X !work & X X X X !work & X X X X X work)","'G(w -> XXXXw)","{We work: 'w',every fifth day: 'XXXX',We work every fifth day: 'G(w -> XXXXw)'}",
LTL_dev_23,"Either failed my exam holds infinitely often or passed the exam holds in the next step.","GFf | Xp","{Either: 'or', failed my exam: 'f', holds infinitely often: 'GF', or: '|', passed the exam: 'p', holds in the next step: 'X', Either failed my exam holds infinitely often or passed the exam holds in the next step: 'GFf | Xp'}",
LTL_dev_24,"Sam is taller than Ben will hold at all instances.","G (sam_taller_than_ben)","Gt","{Sam is taller than Ben: 't', will hold at all instances: 'G', Sam is taller than Ben will hold at all instances: 'Gt'}",
LTL_dev_25,"Whenever the food is hot, the food is cold in the next two steps.","G (hot_food -> (cold_food | X cold_food))","G(h -> XXc)","{Whenever: 'G', the food is hot: 'h', the food is cold: 'c', in the next two steps: 'XX', Whenever the food is hot, the food is cold in the next two steps: 'G(h -> XXc)'}",
LTL_dev_26,"At all times, one of the following apps will be running: messaging, navigation, or music.","G (messaging | navigation | music)","G(m | n | u)","{At all times: 'G', one of the following apps will be running: 'or', messaging: 'm', navigation: 'n', music: 'u', At all times, one of the following apps will be running: messaging, navigation, or music: 'G(m | n | u)'}",
LTL_dev_27,"If the alarm rings, someone will eventually wake up.","G (alarm_ring -> F wake_up)","G(a -> Fw)","{If: '->', the alarm rings: 'a', someone will eventually wake up: 'Fw', If the alarm rings, someone will eventually wake up: 'G(a -> Fw)'}",
LTL_dev_28,"The temperature must always be within a normal range, but if it exceeds that range, it allows for two time intervals to return to normal.","G (temperature_normal | X temperature_normal)","Gn & (e -> XXn)","{The temperature must always be within a normal range: 'Gn', but: 'and', if it exceeds that range: 'e', it allows for two time intervals to return to normal: 'XXn', The temperature must always be within a normal range, but if it exceeds that range, it allows for two time intervals to return to normal: 'Gn & (e -> XXn)'}",
LTL_dev_29,"Not a day goes by where the sky is clear for more than two hours.","G !(clear_sky & X clear_sky & X X clear_sky)","G!(c & XXXc)","{Not a day goes by: 'G', where the sky is clear: 'c', for more than two hours: 'XXX!c', Not a day goes by where the sky is clear for more than two hours: 'G!(c & XXXc)'}",
LTL_dev_30,"The sprinklers can only activate every three hours to conserve water.","G (sprinklers_activate -> (X !sprinklers_activate & X X !sprinklers_activate & X X X !sprinklers_activate))","",,
LTL_dev_31,"Every sunrise is followed by the chirping of birds.","G (sunrise -> X birds_chirping)","G(r -> Xb)","{Every sunrise: 'r', is followed by: 'X', the chirping of birds: 'b', Every sunrise is followed by the chirping of birds: 'G(r -> Xb)'}",
LTL_dev_32,"Eventually, you drink water while the sun shines.","F (drink_water & sun_shines)","F(w & s)","{Eventually: 'F', you drink water: 'w', while the sun shines: 's', Eventually, you drink water while the sun shines: 'F(w & s)'}",
LTL_dev_33,"Both the waves crashing and the seagulls flying occur eventually.","F waves_crashing & F seagulls_flying","F(c & f)","{Both: '&', the waves crashing: 'c', and: '&', the seagulls flying: 'f', occur eventually: 'F', Both the waves crashing and the seagulls flying occur eventually: 'F(c & f)'}",
LTL_dev_34,"It's always the case that the current temperature is equal to tomorrow's expected heat.","G (temperature_today <-> X expected_heat)",")","G(t = Xh","{It's always the case: 'G', that the current temperature: 't', is equal to: '=', tomorrow's expected heat: 'Xh', It's always the case that the current temperature is equal to tomorrow's expected heat: 'G(t = Xh)'}",
LTL_dev_35,"If it's sunny then, in the next step, thunder holds until it rains or always thunder holds.","G (sunny -> X (thunder U rain | G thunder))","G(s -> Xt U r | Gt)","{If it's sunny: 's', then: '->', in the next step: 'X', thunder holds: 't', until it rains: 'U(r)', or: '|', always thunder holds: 'Gt', If it's sunny then, in the next step, thunder holds until it rains or always thunder holds: 'G(s -> Xt U r | Gt)'}",
LTL_dev_36,"The party is on until the speaker is broken or always the party is on.","(party_on U speaker_broken) | G party_on","p U b | Gp","{The party is on: 'p', until: 'U', the speaker is broken: 'b', or: '|', always the party is on: 'Gp', The party is on until the speaker is broken or always the party is on: 'p U b | Gp'}",


