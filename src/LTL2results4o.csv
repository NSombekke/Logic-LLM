ID,Question,Human Annotator,GPT-4o Answer, GPT-4o Description (using LTL.txt prompt), "Compare (first formula is gpt4o, second formula is human)"
LTL_dev_1,"Every time hunger strikes, eating eventually follows.", "G(hunger -> F eating)", "G(hunger -> F eating)", "{'Every time': 'G', 'hunger strikes': 'hunger', 'eating eventually follows': 'F eating', 'hunger eventually followed by eating': 'hunger -> F eating'}", equivalent
LTL_dev_2,"It's never the case that rain and sunshine occur at the same time.","","G(!(rain & sunshine))", "{'It's never the case that': 'G(!', 'rain and sunshine': 'rain & sunshine', 'occur at the same time': 'rain & sunshine'}", equivalent
LTL_dev_3,"Whenever the engine starts, acceleration kicks in three steps later.","","G(engine_starts -> XXX(acceleration))", "{'Whenever': 'G', 'the engine starts': 'engine_starts', 'acceleration kicks in three steps later': 'XXX(acceleration)'}", equivalent
LTL_dev_4,"I am a student must hold everywhere until from some point on, I am graduated holds infinitely often.","","G(student) U GF(graduated)", "{'I am a student must hold everywhere': 'G(student)', 'until': 'U', 'from some point on': 'until', 'I am graduated holds infinitely often': 'GF(graduated)'}", equivalent
LTL_dev_5,"Whenever an exam is scheduled, studying occurs beforehand.","","G(studying U exam_scheduled)", "{'Whenever': 'G', 'an exam is scheduled': 'exam_scheduled', 'studying occurs beforehand': 'studying U exam_scheduled'}", The two formulas are disjoint.
LTL_dev_6,"If it's nighttime, then sleeping occurs.","","G(nighttime -> sleeping)", "{'If': '->', 'it's nighttime': 'nighttime', 'then sleeping occurs': 'sleeping', 'If it's nighttime, then sleeping occurs': 'nighttime -> sleeping'}", equivalent
LTL_dev_7,"Both the sun is shining and the birds are chirping in every time step.","","G(sun_shining & birds_chirping)", "{'Both': '&', 'the sun is shining': 'sun_shining', 'the birds are chirping': 'birds_chirping', 'in every time step': 'G'}", equivalent
LTL_dev_8,"The sun shines always, and whenever the birds sing, the cats don't meow.","","G(sun_shining) & G(birds_singing -> !cats_meowing)", "{'The sun shines always': 'G(sun_shining)', 'whenever': '->', 'the birds sing': 'birds_singing', 'the cats don't meow': '!cats_meowing', 'whenever the birds sing, the cats don't meow': 'G(birds_singing -> !cats_meowing)'}", equivalent
LTL_dev_9,"If it is the case that every emission test is eventually passed, then good air quality needs to holds infinitely often.","","G(emission_test -> F passed) -> GF good_air_quality", "{'If it is the case that': '->', 'every': 'G', 'eventually': 'F', 'emission test': 'emission_test', 'passed': 'passed', 'good air quality': 'good_air_quality', 'needs to hold infinitely often': 'GF good_air_quality'}", equivalent
LTL_dev_10,"If Mark loves Stacy infinitely often, then Stacey loves Mark holds infinitely often as well.","","GF Mark_loves_Stacy -> GF Stacy_loves_Mark", "{'If': '->', 'infinitely often': 'GF', 'Mark loves Stacy': 'Mark_loves_Stacy', 'Stacy loves Mark': 'Stacy_loves_Mark'}", equivalent
LTL_dev_11,"Either the store is open all day or the online website is accessible around the clock.","","G store_open | G website_accessible","{'Either...or...': '|', 'the store is open all day': 'G store_open', 'the online website is accessible around the clock': 'G website_accessible'}", "The first formula is covered by the second one, and the second formula covers the first one."
LTL_dev_12,"From some point in time on I am always not childless.","","F G !childless", "{'From some point in time on': 'F', 'always': 'G', 'I am always not childless': 'G !childless'}", equivalent
LTL_dev_13,"Whenever there is no peace and no prosperity, conflict arises eventually.","","G(!peace & !prosperity -> F conflict)", "{'Whenever': 'G', 'there is no peace and no prosperity': '!peace & !prosperity', 'conflict arises eventually': 'F conflict'}", "The first formula is covered by the second one, and the second formula covers the first one."
LTL_dev_14,"Happiness and sadness never coincide, but one of them is experienced at every moment in life.","","G(!(happiness & sadness)) & G(happiness | sadness)", "{'Happiness and sadness': 'happiness & sadness', 'Happiness and sadness never coincide': 'G(!(happiness & sadness))', 'one of them is experienced at every moment in life': 'G(happiness | sadness)'}", equivalent
LTL_dev_15,"Whenever the ingredients sugar and flour are equal in quantity, the resulting cake's taste and texture are equally good.","","G(sugar_flour_equal -> cake_good)", "{'Whenever': 'G', 'the ingredients sugar and flour are equal in quantity': 'sugar_flour_equal', 'the resulting cake\'s taste and texture are equally good': 'cake_good', 'if sugar_flour_equal then cake_good': 'sugar_flour_equal -> cake_good'}", incomparable
LTL_dev_16,"A meeting can only be scheduled if a room reservation has been made beforehand.","","G(meeting -> X(room_reservation))", "{'A meeting can only be scheduled if': 'meeting ->', 'a room reservation has been made beforehand': 'X(room_reservation)', 'globally': 'G', 'meeting': 'meeting', 'room reservation': 'room_reservation'}", incomparable
LTL_dev_17,"After the shipment is delivered, a return request won't be processed again.","","shipment_delivered -> G(!return_request)", "{'After': '->', 'the shipment is delivered': 'shipment_delivered', 'a return request won\'t be processed again': 'G(!return_request)', 'shipment_delivered followed by no return_request': 'shipment_delivered -> G(!return_request)'}", incomparable
LTL_dev_18,"After the valve is opened, water flows freely.","","valve_open -> F water_flow", "{'After': '->', 'the valve is opened': 'valve_open', 'water flows freely': 'water_flow', 'eventually': 'F', 'valve_open followed by water_flow': 'valve_open -> F water_flow'}", "The first formula is covered by the second one, and the second formula covers the first one."
LTL_dev_19,"Music practice and anyone sleeping won't happen simultaneously.","","G(!(music_practice & sleeping))", "{'Music practice and anyone sleeping': 'music_practice & sleeping', 'won\'t happen simultaneously': 'G(!(music_practice & sleeping))'}", equivalent
LTL_dev_20,"Whenever the oven preheats and the timer beeps for the next step, then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps.","","G(oven_preheat & timer_beep -> X(cookies_aroma))", "{'Whenever': 'G', 'the oven preheats': 'oven_preheat', 'the timer beeps for the next step': 'timer_beep', 'the aroma of freshly baked cookies fills the kitchen one step after the timer beeps': 'X(cookies_aroma)', 'if oven_preheat and timer_beep then next cookies_aroma': 'oven_preheat & timer_beep -> X(cookies_aroma)'}", incomparable
LTL_dev_21,"Whenever the seeds are planted, the flowers bloom eventually from the next step onward.","","G(seeds_planted -> X(F(flowers_bloom)))", "{'Whenever': 'G', 'the seeds are planted': 'seeds_planted', 'the flowers bloom eventually from the next step onward': 'X(F(flowers_bloom))', 'if seeds_planted then eventually next flowers_bloom': 'seeds_planted -> X(F(flowers_bloom))'}", equivalent
LTL_dev_22,"We work every fifth day.","","G (work -> X(!work & X(!work & X(!work & X(!work & X(work))))))", "{'We work': 'work', 'every fifth day': 'X(!work & X(!work & X(!work & X(!work & X(work))))'}", equivalent
LTL_dev_23,"Either failed my exam holds infinitely often or passed the exam holds in the next step.","","GF(failed) | X(passed)", "{'Either': '|', 'failed my exam': 'failed', 'holds infinitely often': 'GF', 'passed the exam': 'passed', 'holds in the next step': 'X'}", equivalent
LTL_dev_24,"Sam is taller than Ben will hold at all instances.","","G(taller)", "{'will hold at all instances': 'G', 'Sam is taller than Ben': 'taller'}", equivalent
LTL_dev_25,"Whenever the food is hot, the food is cold in the next two steps.","","G(hot -> X(X(cold)))", "{'Whenever': '->', 'the food is hot': 'hot', 'the food is cold': 'cold', 'in the next two steps': 'X(X(cold))'}", equivalent
LTL_dev_26,"At all times, one of the following apps will be running: messaging, navigation, or music.","","G(messaging | navigation | music)", "{'At all times': 'G', 'one of the following apps will be running': 'messaging | navigation | music', 'messaging': 'messaging', 'navigation': 'navigation', 'music': 'music'}", equivalent
LTL_dev_27,"If the alarm rings, someone will eventually wake up.","","G(alarm -> F(wake_up))", "{'If': '->', 'the alarm rings': 'alarm', 'someone will eventually wake up': 'F(wake_up)'}", incomparable
LTL_dev_28,"The temperature must always be within a normal range, but if it exceeds that range, it allows for two time intervals to return to normal.","","G(within_range | exceeds_range) & G(exceeds_range -> X(X(within_range)))", "{'must always be': 'G', 'within a normal range': 'within_range', 'exceeds that range': 'exceeds_range', 'within two time intervals': 'X(X(within_range))'}", incomparable
LTL_dev_29,"Not a day goes by where the sky is clear for more than two hours.","","G(!(clear & X(clear) & X(X(clear))))", "{'Not a day goes by': 'G', 'the sky is clear for more than two hours': 'clear & X(clear) & X(X(clear))', 'not clear for more than two hours': '!(clear & X(clear) & X(X(clear)))'}", equivalent
LTL_dev_30,"The sprinklers can only activate every three hours to conserve water.","","G(s -> !(X(s) | X(X(s)) | X(X(X(s)))))", "{'The sprinklers can only activate every three hours': 'G(s -> !(X(s) | X(X(s)) | X(X(X(s)))))', 'to conserve water': '', 's': 'the sprinklers are activated'}", equivalent
LTL_dev_31,"Every sunrise is followed by the chirping of birds.","","G (s -> X c)", "{'Every': 'G', 'followed by': 'X', 'sunrise': 's', 'the chirping of birds': 'c', 'Every sunrise is followed by the chirping of birds': 's -> X c'}", equivalent
LTL_dev_32,"Eventually, you drink water while the sun shines.","","F(w & s)", "{'Eventually': 'F', 'you drink water': 'w', 'the sun shines': 's', 'while the sun shines': '& s', 'you drink water while the sun shines': 'w & s'}", equivalent
LTL_dev_33,"Both the waves crashing and the seagulls flying occur eventually.","","F w & F s", "{'Eventually': 'F', 'the waves crashing': 'w', 'the seagulls flying': 's', 'both the waves crashing and the seagulls flying': 'F w & F s'}", equivalent
LTL_dev_34,"It's always the case that the current temperature is equal to tomorrow's expected heat.","","G (temp <-> X heat)", "{'It's always the case': 'G', 'the current temperature': 'temp', 'tomorrow's expected heat': 'heat', 'is equal to': '<->', 'the current temperature is equal to tomorrow's expected heat': 'temp <-> X heat'}", equivalent
LTL_dev_35,"If it's sunny then, in the next step, thunder holds until it rains or always thunder holds.","","s -> (X (t U r) | G t)", "{'If': '->', 'it's sunny': 's', 'in the next step': 'X', 'thunder holds': 't', 'it rains': 'r', 'until': 'U', 'always': 'G', 'in the next step, thunder holds until it rains': 'X (t U r)', 'always thunder holds': 'G t', 'or': '|', 'in the next step, thunder holds until it rains or always thunder holds': 'X (t U r) | G t'}", equivalent
LTL_dev_36,"The party is on until the speaker is broken or always the party is on.","","(p U b) | G p", "{'The party is on': 'p', 'the speaker is broken': 'b', 'until': 'U', 'or': '|', 'always': 'G', 'the party is on until the speaker is broken': 'p U b', 'always the party is on': 'G p'}", equivalent
