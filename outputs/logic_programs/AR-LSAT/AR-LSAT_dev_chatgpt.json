[
    {
        "id": "ar_lsat_200006_1-G_1_1",
        "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
        "question": "Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers?",
        "options": [
          "A) Fred, Juan",
          "B) Juan, Paul",
          "C) Juan, Marc, Paul",
          "D) Juan, Marc, Trisha",
          "E) Juan, Nita, Trisha"
        ],
        "answer": "E",
        "gpt": "Declarations: children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha]) lockers = EnumSort([1, 2, 3, 4, 5]) assigned_to = Function([children] -> [lockers]) shared_locker = Function([lockers] -> [bool]) Constraints: ForAll([c:children], Or(And(assigned_to(c) == l, l != 3), assigned_to(c) == 3)) ::: Fred must be assigned to locker 3 ForAll([l:lockers], And(1 <= assigned_to(Fred) <= 2, 1 <= assigned_to(Juan) <= 2, 1 <= assigned_to(Marc) <= 2, 1 <= assigned_to(Paul) <= 2, 1 <= assigned_to(Nita) <= 2, 1 <= assigned_to(Rachel) <= 2, 1 <= assigned_to(Trisha) <= 2)) ::: Each locker must be assigned to either one or two children ForAll([c:children], Count([l:lockers], assigned_to(c) == l) == 1) ::: Each child must be assigned to exactly one locker ForAll([l:lockers], Implies(shared_locker(l), And(Exists([g:girls], assigned_to(g) == l), Exists([b:boys], assigned_to(b) == l)))) ::: Each shared locker must be assigned to one girl and one boy assigned_to(Juan) != 3 ::: Juan must share a locker Not(Exists([l:lockers], And(shared_locker(l), assigned_to(Rachel) == l))) ::: Rachel cannot share a locker Not(Exists([l1:lockers, l2:lockers], And(shared_locker(l1), shared_locker(l2), Abs(l1 - l2) == 1, assigned_to(Nita) == l1, assigned_to(Trisha) == l2))) ::: Nita's locker cannot be adjacent to Trisha's locker Options: Question ::: Which one of the following is a complete and accurate list of the children who must be among those assigned to shared lockers? is_valid(And(shared_locker(assigned_to(Fred)), shared_locker(assigned_to(Juan)))) ::: (A) is_valid(And(shared_locker(assigned_to(Juan)), shared_locker(assigned_to(Paul)))) ::: (B) is_valid(And(shared_locker(assigned_to(Juan)), shared_locker(assigned_to(Marc)), shared_locker(assigned_to(Paul)))) ::: (C) is_valid(And(shared_locker(assigned_to(Juan)), shared_locker(assigned_to(Marc)), shared_locker(assigned_to(Trisha)))) ::: (D) is_valid(And(shared_locker(assigned_to(Juan)), shared_locker(assigned_to(Nita)), shared_locker(assigned_to(Trisha)))) ::: (E)"
      },
      {
        "id": "ar_lsat_200006_1-G_1_2",
        "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
        "question": "If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true?",
        "options": [
          "A) Juan is assigned to locker 4.",
          "B) Juan is assigned to locker 5.",
          "C) Paul is assigned to locker 2.",
          "D) Rachel is assigned to locker 2.",
          "E) Rachel is assigned to locker 5."
        ],
        "answer": "B",
        "gpt": "Declarations: children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha]) lockers = EnumSort([1, 2, 3, 4, 5]) assigned_to = Function([children] -> [lockers]) shared_locker = Function([lockers] -> [bool]) Constraints: ForAll([c:children], Or(And(assigned_to(c) == l, l != 3), assigned_to(c) == 3)) ::: Fred must be assigned to locker 3 ForAll([l:lockers], And(1 <= assigned_to(Fred) <= 2, 1 <= assigned_to(Juan) <= 2, 1 <= assigned_to(Marc) <= 2, 1 <= assigned_to(Paul) <= 2, 1 <= assigned_to(Nita) <= 2, 1 <= assigned_to(Rachel) <= 2, 1 <= assigned_to(Trisha) <= 2)) ::: Each locker must be assigned to either one or two children ForAll([c:children], Count([l:lockers], assigned_to(c) == l) == 1) ::: Each child must be assigned to exactly one locker ForAll([l:lockers], Implies(shared_locker(l), And(Exists([g:girls], assigned_to(g) == l), Exists([b:boys], assigned_to(b) == l)))) ::: Each shared locker must be assigned to one girl and one boy assigned_to(Juan) != 3 ::: Juan must share a locker Not(Exists([l:lockers], And(shared_locker(l), assigned_to(Rachel) == l))) ::: Rachel cannot share a locker Not(Exists([l1:lockers, l2:lockers], And(shared_locker(l1), shared_locker(l2), Abs(l1 - l2) == 1, assigned_to(Nita) == l1, assigned_to(Trisha) == l2))) ::: Nita's locker cannot be adjacent to Trisha's locker Given: assigned_to(Trisha) == 3 ::: Trisha is assigned to locker 3 assigned_to(Marc) == 1 ::: Marc alone is assigned to locker 1 Options: Question ::: If Trisha is assigned to locker 3 and Marc alone is assigned to locker 1, then which one of the following must be true? is_valid(assigned_to(Juan) == 4) ::: (A) is_valid(assigned_to(Juan) == 5) ::: (B) is_valid(assigned_to(Paul) == 2) ::: (C) is_valid(assigned_to(Rachel) == 2) ::: (D) is_valid(assigned_to(Rachel) == 5) ::: (E)"
      },
      {
        "id": "ar_lsat_200006_1-G_1_3",
        "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
        "question": "If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker?",
        "options": [
          "A) locker 2",
          "B) locker 4",
          "C) locker 1, locker 2",
          "D) locker 1, locker 4",
          "E) locker 2, locker 4"
        ],
        "answer": "D",
        "gpt": "Declarations: children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha]) lockers = EnumSort([1, 2, 3, 4, 5]) assigned_to = Function([children] -> [lockers]) shared_locker = Function([lockers] -> [bool]) Constraints: ForAll([c:children], Or(And(assigned_to(c) == l, l != 3), assigned_to(c) == 3)) ::: Fred must be assigned to locker 3 ForAll([l:lockers], And(1 <= assigned_to(Fred) <= 2, 1 <= assigned_to(Juan) <= 2, 1 <= assigned_to(Marc) <= 2, 1 <= assigned_to(Paul) <= 2, 1 <= assigned_to(Nita) <= 2, 1 <= assigned_to(Rachel) <= 2, 1 <= assigned_to(Trisha) <= 2)) ::: Each locker must be assigned to either one or two children ForAll([c:children], Count([l:lockers], assigned_to(c) == l) == 1) ::: Each child must be assigned to exactly one locker ForAll([l:lockers], Implies(shared_locker(l), And(Exists([g:girls], assigned_to(g) == l), Exists([b:boys], assigned_to(b) == l)))) ::: Each shared locker must be assigned to one girl and one boy assigned_to(Juan) != 3 ::: Juan must share a locker Not(Exists([l:lockers], And(shared_locker(l), assigned_to(Rachel) == l))) ::: Rachel cannot share a locker Not(Exists([l1:lockers, l2:lockers], And(shared_locker(l1), shared_locker(l2), Abs(l1 - l2) == 1, assigned_to(Nita) == l1, assigned_to(Trisha) == l2))) ::: Nita's locker cannot be adjacent to Trisha's locker Given: assigned_to(Juan) == 5 ::: Juan is assigned to locker 5 Options: Question ::: If the four boys are assigned to consecutively numbered lockers and Juan is assigned to locker 5, then which one of the following is a complete and accurate list of lockers each of which CANNOT be a shared locker? is_valid(Not(shared_locker(2))) ::: (A) is_valid(Not(shared_locker(4))) ::: (B) is_valid(And(Not(shared_locker(1)), Not(shared_locker(2)))) ::: (C) is_valid(And(Not(shared_locker(1)), Not(shared_locker(4)))) ::: (D) is_valid(And(Not(shared_locker(2)), Not(shared_locker(4)))) ::: (E)"
      },
      {
        "id": "ar_lsat_200006_1-G_1_4",
        "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
        "question": "Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned?",
        "options": [
          "A) one",
          "B) two",
          "C) three",
          "D) four",
          "E) five"
        ],
        "answer": "C",
        "gpt": "Declarations: children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha]) lockers = EnumSort([1, 2, 3, 4, 5]) assigned_to = Function([children] -> [lockers]) shared_locker = Function([lockers] -> [bool]) Constraints: ForAll([c:children], Or(And(assigned_to(c) == l, l != 3), assigned_to(c) == 3)) ::: Fred must be assigned to locker 3 ForAll([l:lockers], And(1 <= assigned_to(Fred) <= 2, 1 <= assigned_to(Juan) <= 2, 1 <= assigned_to(Marc) <= 2, 1 <= assigned_to(Paul) <= 2, 1 <= assigned_to(Nita) <= 2, 1 <= assigned_to(Rachel) <= 2, 1 <= assigned_to(Trisha) <= 2)) ::: Each locker must be assigned to either one or two children ForAll([c:children], Count([l:lockers], assigned_to(c) == l) == 1) ::: Each child must be assigned to exactly one locker ForAll([l:lockers], Implies(shared_locker(l), And(Exists([g:girls], assigned_to(g) == l), Exists([b:boys], assigned_to(b) == l)))) ::: Each shared locker must be assigned to one girl and one boy assigned_to(Juan) != 3 ::: Juan must share a locker Not(Exists([l:lockers], And(shared_locker(l), assigned_to(Rachel) == l))) ::: Rachel cannot share a locker Not(Exists([l1:lockers, l2:lockers], And(shared_locker(l1), shared_locker(l2), Abs(l1 - l2) == 1, assigned_to(Nita) == l1, assigned_to(Trisha) == l2))) ::: Nita's locker cannot be adjacent to Trisha's locker Given: Exists([l:lockers], assigned_to(Rachel) == l) ::: Rachel has been assigned to a locker Options: Question ::: Once Rachel has been assigned to a locker, what is the maximum number of different lockers each of which could be the locker to which Juan is assigned? is_valid(Count([l:lockers], assigned_to(Juan) == l) == 1) ::: (A) is_valid(Count([l:lockers], assigned_to(Juan) == l) == 2) ::: (B) is_valid(Count([l:lockers], assigned_to(Juan) == l) == 3) ::: (C) is_valid(Count([l:lockers], assigned_to(Juan) == l) == 4) ::: (D) is_valid(Count([l:lockers], assigned_to(Juan) == l) == 5) ::: (E)"
      },
      {
        "id": "ar_lsat_200006_1-G_1_5",
        "context": "Four boys—Fred, Juan, Marc, and Paul—and three girls—Nita, Rachel, and Trisha—will be assigned to a row of five adjacent lockers, numbered consecutively 1 through 5, arranged along a straight wall. The following conditions govern the assignment of lockers to the seven children: Each locker must be assigned to either one or two children, and each child must be assigned to exactly one locker. Each shared locker must be assigned to one girl and one boy. Juan must share a locker, but Rachel cannot share a locker. Nita's locker cannot be adjacent to Trisha's locker. Fred must be assigned to locker 3.",
        "question": "If the first three lockers are assigned to girls, which one of the following must be true?",
        "options": [
          "A) Juan is assigned to locker 1.",
          "B) Nita is assigned to locker 3.",
          "C) Trisha is assigned to locker 1.",
          "D) Juan is assigned to the same locker as Trisha.",
          "E) Paul is assigned to the same locker as Trisha."
        ],
        "answer": "A",
        "gpt": "Declarations: children = EnumSort([Fred, Juan, Marc, Paul, Nita, Rachel, Trisha]) lockers = EnumSort([1, 2, 3, 4, 5]) assigned_to = Function([children] -> [lockers]) shared_locker = Function([lockers] -> [bool]) Constraints: ForAll([c:children], Or(And(assigned_to(c) == l, l != 3), assigned_to(c) == 3)) ::: Fred must be assigned to locker 3 ForAll([l:lockers], And(1 <= assigned_to(Fred) <= 2, 1 <= assigned_to(Juan) <= 2, 1 <= assigned_to(Marc) <= 2, 1 <= assigned_to(Paul) <= 2, 1 <= assigned_to(Nita) <= 2, 1 <= assigned_to(Rachel) <= 2, 1 <= assigned_to(Trisha) <= 2)) ::: Each locker must be assigned to either one or two children ForAll([c:children], Count([l:lockers], assigned_to(c) == l) == 1) ::: Each child must be assigned to exactly one locker ForAll([l:lockers], Implies(shared_locker(l), And(Exists([g:girls], assigned_to(g) == l), Exists([b:boys], assigned_to(b) == l)))) ::: Each shared locker must be assigned to one girl and one boy assigned_to(Juan) != 3 ::: Juan must share a locker Not(Exists([l:lockers], And(shared_locker(l), assigned_to(Rachel) == l))) ::: Rachel cannot share a locker Not(Exists([l1:lockers, l2:lockers], And(shared_locker(l1), shared_locker(l2), Abs(l1 - l2) == 1, assigned_to(Nita) == l1, assigned_to(Trisha) == l2))) ::: Nita's locker cannot be adjacent to Trisha's locker Given: assigned_to(Nita) == 1 ::: Nita's locker is assigned to locker 1 assigned_to(Rachel) == 2 ::: Rachel's locker is assigned to locker 2 assigned_to(Trisha) == 3 ::: Trisha's locker is assigned to locker 3 Options: Question ::: If the first three lockers are assigned to girls, which one of the following must be true? is_valid(assigned_to(Juan) == 1) ::: (A) is_valid(assigned_to(Nita) == 3) ::: (B) is_valid(assigned_to(Trisha) == 1) ::: (C) is_valid(assigned_to(Juan) == assigned_to(Trisha)) ::: (D) is_valid(assigned_to(Paul) == assigned_to(Trisha)) ::: (E)"
      }
]