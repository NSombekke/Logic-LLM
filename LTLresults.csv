Natural Language,Formula,GPT-3,Description
"Every a is eventually followed by a e.","G(a -> F e)",,
"It is never the case that a and b hold at the same time.","G(!(a & b))",,
"Whenever a is enabled, b is enabled three steps later.","G(a -> X (X (X b)))",,
"e must hold everywhere until from some point on, d holds infinitely often.","e U (G (F d))",,
"If b holds at some point, a has to hold somewhere beforehand.","(F b) -> (!b U (a & !b))",,
"Whenever a holds, b holds as well.","G(a -> b)",,
"Both a and b hold in every time step.","G (a & b)",,
"a holds always and whenever b holds, c does not hold.","G a & G(b -> !c)",,
"If it is the case that every a is eventually followed by a b, then c needs to holds infinitely often.","G(a -> F b) -> G F c",,
"If a holds infinitely often, then b holds infinitely often as well.","G F a -> G F b",,
"Either a or b holds infinitely often","G F a || G F b",,
"a never holds from some point in time on.","F G ! a",,
"Whenever a and b do not hold, c holds eventually.","G (!(a & b) -> F c)",,
"a and b never occur at the same time but one of them holds in every time step.","G(!(a &b)) & G(a || b)",,
"Whenever the inputs a and b are the same, the outputs c and d are the same.","G ((a <-> b) -> (c <-> d))",,
"a can only happen if b happened before.","(! a) U b",,
"Once a happened, b won't happen again.","G (a -> X G ! b)",,
"a releases b.","(b U (b & ! a)) | G b",,
"a and b won't occur at the same time.","G !(a & b)",,
"Whenever a holds and b holds in the next step, then c holds one step after b.","G (a & X b -> X X c)",,
"Whenever a holds, b holds eventually from the next step on.","G (a -> X F b)",,
"a holds in every fifth step.","a & G (a -> X ! a & X X ! a & X X X ! a & X X X X ! a & X X X X X a)",,
"Either a holds infinitely often or b holds in the next step.","G F a || X b",,
"a will hold at all instances.","G (a)",,
"Whenever a holds, b must hold in the next two steps.","G (a -> (b | X b))",,
"One of the following aps will hold at all instances: a,b,c.","G (a | b | c)",,
"If a holds b will eventually hold.","G (a -> F b)",,
"a must always hold, but if is exceeds, it allow two timestamps to recover.","! G (! (a & X a))",,
"not a holds at most two timestamps.","! G (! (a & X a))",,
"a can only hold every three timestamps.","G ( a -> (X !a | XX !a | XXX !a))",,
"Every a is followed by a b.","G ( a -> X b)",,
"Eventually a and b hold.","F (a & b)",,
"Both a and b hold eventually.","F a & F b",,
"It is always the case that a is the same as b in the next step.","G (a <-> X b)",,
"If b holds then, in the next step, c holds until a holds or always c holds.","b -> X ((c U a) || G c)",,
"a holds until b holds or always a holds.","(a U b) || G a",,
ID,Question,Formula, Answer
LTL_dev_1,"Every time hunger strikes, eating eventually follows.","G(hunger -> F eating)", G(hunger -> F eating).FINISH, {"Every time": "G", "hunger strikes": "hunger", "eventually": "F", "eating follows": "eating", "hunger strikes, eating eventually follows": "hunger -> F eating"}
LTL_dev_2,"It's never the case that rain and sunshine occur at the same time.  ","G(!(rain & sunshine))", G(~(rain & sunshine)).FINISH ,{"never": "G", "rain": "rain", "sunshine": "sunshine", "rain and sunshine": "rain & sunshine", "never the case that rain and sunshine occur at the same time": "G(~(rain & sunshine))"}
LTL_dev_3,"Whenever the engine starts, acceleration kicks in three steps later.  ","G(engine_start -> X (X (X acceleration_on)))", 
LTL_dev_4,"I am a student must hold everywhere until from some point on, I am graduated holds infinitely often.  ","student U (G (F graduated))", 
LTL_dev_5,"Whenever an exam is scheduled, studying occurs beforehand.  ","(F exam_scheduled) -> (!exam_scheduled U (studying & !exam_scheduled))", 
LTL_dev_6,"If it's nighttime, then sleeping occurs.  ","G (nighttime -> sleeping)", 
LTL_dev_7,"Both the sun is shining and the birds are chirping in every time step.  ","G (sun_shining & birds_chirping)", 
LTL_dev_8,"The sun shines always, and whenever the birds sing, the cats don't meow.  ","G sun_shines & G(birds_sing -> !cats_meow)", 
LTL_dev_9,"If it is the case that every emission test is eventually passed, then good air quality needs to holds infinitely often.  ","G(emission_test -> F passed) -> G F good_air_quality", 
LTL_dev_10,"If Mark loves Stacy infinitely often, then Stacey loves Mark holds infinitely often as well.  ","G F mark_loves_stacey -> G F stacey_loves_mark", 
LTL_dev_11,"Either the store is open all day or the online website is accessible around the clock.  ","G F store_open || G F online_website_accessible", 
LTL_dev_12,"Form some point in time on I am always not childless.  ","F G ! childless", 
LTL_dev_13,"Whenever these is no peace and no prosperity, conflict arises eventually.  ","G (!(peace & prosperity) -> F conflict)", 
LTL_dev_14,"Happiness and sadness never coincide, but one of them is experienced at every moment in life.  ","G(!(happiness & sadness)) & G(happiness || sadness)", 
LTL_dev_15,"Whenever the ingredients sugar and flour are equal in quantity, the resulting cake's taste and texture are equally good.  ","G ((sugar <-> flower) -> (taste <-> texture))", 
LTL_dev_16,"A meeting can only be scheduled if a room reservation has been made beforehand.  ","(! schedule_meeting) U room_reservation", 
LTL_dev_17,"After the shipment is delivered, a return request won't be processed again.  ","G (shipment_delivered -> X G ! processed_return)", 
LTL_dev_18,"After the valve is opened, water flows freely.  ","(water_flow U (water_flow & ! open_valve)) | G water_flow", 
LTL_dev_19,"Music practice and anyone sleeping won't happen simultaneously.  ","G !(music_practise & anyone_sleeping)", 
LTL_dev_20,"Whenever the oven preheats and the timer beeps for the next step, then the aroma of freshly baked cookies fills the kitchen one step after the timer beeps.  ","G (oven_preheats & X times_beeps -> X X aroma)", 
LTL_dev_21,"Whenever the seeds are planted, the flowers bloom eventually from the next step onward.  ","G (seeds_planted -> X F flowers_bloom)", 
LTL_dev_22,"We work every fifth day.  ","work & G (work -> X ! work & X X ! work & X X X ! work & X X X X ! work & X X X X X work)", 
LTL_dev_23,"Either failed my exam holds infinitely often or passed the exam holds in the next step.  ","G F failed_exam || X passed_exam", 
LTL_dev_24,"Sam is taller than Ben will hold at all instances.  ","G (sam_taller_than_ben)", 
LTL_dev_25,"Whenever the food is hot, the food is cold in the next two steps.  ","G (hot_food -> (cold_food | X cold_food))", 
LTL_dev_26,"At all times, one of the following apps will be running: messaging, navigation, or music..  ","G (messaging | navigation | music)", 
LTL_dev_27,"If the alarm rings, someone will eventually wake up.  ","G (alarm_ring -> F wake_up)", 
LTL_dev_28,"The temperature must always be within a normal range, but if it exceeds that range, it allows for two time intervals to return to normal.  ","! G (! (temperature_normal & X temperature_normal))", 
LTL_dev_29,"Not a day goes by where the sky is clear for more than two hours.  ","! G (! (clear_sky & X clear_sky))", 
LTL_dev_30,"The sprinklers can only activate every three hours to conserve water.  ","G ( sprinklers_activate -> (X !sprinklers_activate | XX !sprinklers_activate | XXX !sprinklers_activate))", 
LTL_dev_31,"Every sunrise is followed by the chirping of birds.  ","G ( sunrise -> X birds_chirping)", 
LTL_dev_32,"Eventually, the you drink water while the sun shines.  ","F (drink_water & sun_shines)", 
LTL_dev_33,"Both the waves crashing and the seagulls flying occur eventually.  ","F waves_crashing & F seagulls_flying", 
LTL_dev_34,"It's always the case that the current temperature is equal to tomorrow's temperature.  ","G (temperature_today <-> X temperature_tomorrow)", 
LTL_dev_35,"If its sunny then, in the next step, thunder holds until it rains or always tunder holds.  ","sunny -> X ((thunder U rain) || G thunder)", 
LTL_dev_36,"The party is on until the speaker is broken or always the party is on .  ","(party_on U speaker_broken) || G party_on", 

