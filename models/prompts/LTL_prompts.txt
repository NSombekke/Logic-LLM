Given a context, question and options. The task is to first parse the question into a canonical formular and then from this formula to raw LTL formula. Also the options need to parsed into traces.
Below an explanaition is given of all the input you will recieve and what you should do with it.
Context: Declares the scene in which the question needs to be answered. Use this knowledge to parse the question and the options.
Question: Contains the question that needs to be answered. The task is to parse the question into a canonical formula and then based on the canonical formular to a raw LTL formula.
Your raw LTL formula answers always need to follow the following output format and you always have to try to provide a LTL formula. You may repeat your answers.
Remember that U means "until", G means "globally", F means "finally", which means GF means "infinitely often".
The formula should only contain atomic propositions or operators ||, &, !, U, G, F.
Options: The options need to be parsed into traces. These traces need to be a list ([]) containing dictionaries for each timestep ({}). In each dictionary the state of the corresponding timestep is given.
------
Context:
Our environment consists of grid-based rooms across multiple floors. Each floor features distinct rooms: the first floor has a red room and a yellow room, the second floor has a green room, and the third floor includes a purple room, an orange room, and Landmark 1. The drone’s movement is limited to one floor and not more than one room at a time within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.
Question:
always avoid the green room and navigate to the third floor. Which one of the following is a possible path for the drone to follow?
Options:
(A) From the third floor go to the green room and stay there,
(B) Go inside the red room and then move to the green room,
(C) Go to the second floor passing the yellow room and then go to the third floor
###
# canonical formular of the question: 
finally ( and ( the third floor , not ( the green room ) ) )
# raw LTL formula of the question:
F ( third_floor & ! green_room )

# Options
t_A = [
    {'first_floor': False, 'second_floor': False, 'third_floor': True, 'red_room': False, 'yellow_room': False, 'green_room': False, 'purple_room': True, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': True, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': False, 'yellow_room': True, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': True, 'orange_room': False, 'landmark_1': False}
] ::: (C)
------
Context:
Our environment consists of grid-based rooms across multiple floors. Each floor features distinct rooms: the first floor has a red room and a yellow room, the second floor has a green room, and the third floor includes a purple room, an orange room, and Landmark 1. The drone’s movement is limited to one floor and not more than one room at a time within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.
Question:
go through the yellow room to the second floor. Which one of the following is a possible path for the drone to follow?
Options:
(A) From the third floor go to the yellow room then move to the green room,
(B) Visit the second floor after going to the red room,
(C) Go to the red room and finally go to the yellow room
###
# formular of the question: 
finally ( and ( the yellow room , finally ( the second floor ) ) )
# raw LTL formula of the question:
F ( yellow_room & F ( second_floor ) )

# Options
t_A = [
    {'first_floor': False, 'second_floor': False, 'third_floor': True, 'red_room': False, 'yellow_room': False, 'green_room': False, 'purple_room': True, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'second_floor': False, 'third_floor': False, 'red_room': False, 'yellow_room': True, 'green_room': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (C)
------
Context:
Our environment consists of grid-based rooms across multiple floors. Each floor features distinct rooms: the first floor has a red room and a yellow room, the second floor has a green room, and the third floor includes a purple room, an orange room, and Landmark 1. The drone’s movement is limited to one floor and not more than one room at a time within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.
Question:
go to landmark one through the first floor . Which one of the following is a possible path for the drone to follow?
Options:
(A) First visit the green room and then go to the yellow room,
(B) After visiting the green room, go to landmark one and visit the purple room,
(C) Go to the first floor and then move the red room
###
# formular of the question: 
finally ( and ( the first floor , finally ( landmark 1 ) ) )
# raw LTL formula of the question:
F ( first_floor & F ( landmark_1 ) )

# Options
t_A = [
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'second_floor': False, 'third_floor': False, 'red_room': False, 'yellow_room': True, 'green_room': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': True, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': False, 'orange_room': False, 'landmark_1': True},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': True, 'orange_room': False, 'landmark_1': False}

] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (C)