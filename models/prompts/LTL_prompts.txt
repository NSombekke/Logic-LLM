Given a context, question, and options, your task is to first parse the question into a canonical formula and then 
convert this formula into a raw LTL (Linear Temporal Logic) formula. Additionally, parse the options into traces.

Below is an explanation of all the inputs you will receive and the steps you need to follow:

Context: Describes the environment in which the question needs to be answered. Use this information to parse the question and options.

Question: Contains the question that needs to be answered. The task is to parse the question into a canonical formula and then convert 
this canonical formula into a raw LTL formula. Your raw LTL formula answers must always follow the specified output format, and you 
should always attempt to provide an LTL formula. Note that "U" means "until", "G" means "globally", "F" means "finally", and "GF" 
means "infinitely often." The formula should only contain atomic propositions or operators: ||, &, !, U, G, F.

Options: The options need to be parsed into traces. Construct a trace that corresponds to the LTL formula provided, considering the 
context of our environment. These traces need to be a list ([]) containing dictionaries for each timestep ({}). Each dictionary 
should represent the state at the corresponding timestep. Include all propositions from the context in the trace (e.g., floor names, room colors).

Instructions:

Identify the relevant propositions based on the context (e.g., floor names, room colors).
Translate the LTL formula into a logical sequence of states.
Generate a trace in the following format: t = [{}, ...], where each element in the list represents a time step with the state of relevant propositions.
------
Context:
Our environment is a gridworld with 3 floors, each consisting of rooms made up of grid cells. Each floor has distinct rooms: the first floor contains a red room and a yellow room, the second floor contains a green room, and the third floor includes a purple room, an orange room, and Landmark one. All three floors are connected by a blue room, which is present on each floor. The drone's movement is limited to one floor and not more than one room at a timestep within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.

Question:
always avoid the green room and navigate to the third floor. Which one of the following is a possible path for the drone to follow?

Options:
(A) From the third floor go to the green room and stay there,
(B) Go inside the red room and then move to the green room,
(C) Go to the second floor passing the yellow room and then go to the third floor
###
# canonical formular of the question: 
finally ( and ( the third floor , not ( the green room ) ) )

# raw LTL formula of the question:
F ( third_floor & ! green_room )

# Options
t_A = [
    {'first_floor': False, 'second_floor': False, 'third_floor': True, 'red_room': False, 'yellow_room': False, 'green_room': False, 'purple_room': True, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': True, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': False, 'yellow_room': True, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': True, 'orange_room': False, 'landmark_1': False}
] ::: (C)
------
Context:
Our environment is a gridworld with 3 floors, each consisting of rooms made up of grid cells. Each floor has distinct rooms: the first floor contains a red room and a yellow room, the second floor contains a green room, and the third floor includes a purple room, an orange room, and Landmark one. All three floors are connected by a blue room, which is present on each floor. The drone's movement is limited to one floor and not more than one room at a timestep within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.

Question:
go through the yellow room to the second floor. Which one of the following is a possible path for the drone to follow?

Options:
(A) From the third floor go to the yellow room then move to the green room,
(B) Visit the second floor after going to the red room,
(C) Go to the red room and finally go to the yellow room
###
# formular of the question: 
finally ( and ( the yellow room , finally ( the second floor ) ) )

# raw LTL formula of the question:
F ( yellow_room & F ( second_floor ) )

# Options
t_A = [
    {'first_floor': False, 'second_floor': False, 'third_floor': True, 'red_room': False, 'yellow_room': False, 'green_room': False, 'purple_room': True, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'second_floor': False, 'third_floor': False, 'red_room': False, 'yellow_room': True, 'green_room': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (C)
------
Context:
Our environment is a gridworld with 3 floors, each consisting of rooms made up of grid cells. Each floor has distinct rooms: the first floor contains a red room and a yellow room, the second floor contains a green room, and the third floor includes a purple room, an orange room, and Landmark one. All three floors are connected by a blue room, which is present on each floor. The drone's movement is limited to one floor and not more than one room at a timestep within this structured environment. This setup is crucial for guiding effective planning and decision-making processes within the context of our problem.

Question:
go to landmark one through the first floor . Which one of the following is a possible path for the drone to follow?

Options:
(A) First visit the green room and then go to the yellow room,
(B) After visiting the green room, go to landmark one and visit the purple room,
(C) Go to the first floor and then move the red room
###
# formular of the question: 
finally ( and ( the first floor , finally ( landmark 1 ) ) )

# raw LTL formula of the question:
F ( first_floor & F ( landmark_1 ) )

# Options
t_A = [
    {'first_floor': False, 'second_floor': True, 'third_floor': False, 'red_room': False, 'yellow_room': False, 'green_room': True, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'second_floor': False, 'third_floor': False, 'red_room': False, 'yellow_room': True, 'green_room': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (A)
t_B = [
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': True, 'green_room': True, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': False, 'orange_room': False, 'landmark_1': True},
    {'first_floor': False, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': True, 'purple_room': True, 'orange_room': False, 'landmark_1': False}

] ::: (B)
t_C = [
    {'first_floor': True, 'red_room': False, 'yellow_room': False, 'second_floor': False, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False},
    {'first_floor': True, 'red_room': True, 'yellow_room': False, 'second_floor': True, 'green_room': False, 'third_floor': False, 'purple_room': False, 'orange_room': False, 'landmark_1': False}
] ::: (C)